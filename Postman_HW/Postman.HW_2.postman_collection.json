{
	"info": {
		"_postman_id": "72d75c04-06cb-472f-823e-02cb5b8d912c",
		"name": "Postman.HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19371006"
	},
	"item": [
		{
			"name": "Task_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Check string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// 2. Status code 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Parse response body into JSON\r",
							"let responseJson = pm.response.json();\r",
							"// 4. Check that name in response is equal to name from request(name enter manually)\r",
							"pm.test(\"Response name is equal to request name\", function(){\r",
							"    pm.expect(responseJson.name).to.eql(\"Dmitry\");\r",
							"})\r",
							"\r",
							"// 5. Check that age in response is equal to age from request(age enter manually)\r",
							"pm.test(\"Response age is equal to request age\", function(){\r",
							"    pm.expect(responseJson.age).to.eql(\"23\");\r",
							"})\r",
							"\r",
							"// 6. Check that salary in response is equal to salary from request(salary enter manually)\r",
							"pm.test(\"Response salary is equal to request salary\", function(){\r",
							"    pm.expect(responseJson.salary).to.eql(1500);\r",
							"})\r",
							"\r",
							"// 7. Parse request\r",
							"let requestJson = request.data;\r",
							"\r",
							"// 8. Check that name in response is equal to name from request (name pick up from request)\r",
							"pm.test(\"Response name is equal to request name(parsed request)\", function(){\r",
							"    pm.expect(responseJson.name).to.eql(requestJson.name);\r",
							"})\r",
							"\r",
							"// 9. Check that age in response is equal to age from request (age pick up from request)\r",
							"pm.test(\"Response age is equal to request name(parsed request)\", function(){\r",
							"    pm.expect(responseJson.age).to.eql(requestJson.age);\r",
							"})\r",
							"\r",
							"// 10. Check that salary in response is equal to salary from request (salary pick up from request)\r",
							"pm.test(\"Response salary is equal to request salary(parsed request)\", function(){\r",
							"    pm.expect(responseJson.salary).to.eql(parseInt(requestJson.salary));\r",
							"})\r",
							"\r",
							"// 11. Print the family parameter from response to the console.\r",
							"console.log(responseJson.family);\r",
							"\r",
							"// 12. Check that u_salary_1_5_year is equal to salary * 4 (salary pick up from reauest)\r",
							"pm.test(\"u_salary_1_5_year is equal to salary * 4\", function(){\r",
							"    pm.expect(responseJson.family.u_salary_1_5_year).to.eql(4*parseInt(requestJson.salary))\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitry",
							"description": "`",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Parse response body into JSON\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"// 4. Parse request\r",
							"let requestJson = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Check that name in response is equal to name from request (name pick up from request)\r",
							"pm.test(\"Name in respone is equal to name from request\", function(){\r",
							"    pm.expect(responseJson.name).to.eql(requestJson.name)\r",
							"})\r",
							"\r",
							"// 6. Check that age in response is equal to age from request (age pick up from request)\r",
							"pm.test(\"Age in response is equal to name from request\", function(){\r",
							"    pm.expect(responseJson.age).to.eql(requestJson.age)\r",
							"})\r",
							"\r",
							"// 7. Check that salary in response is equal to salary from request (salary pick up from request)\r",
							"pm.test(\"Salary in response is equal to salary from request\", function(){\r",
							"    pm.expect(responseJson.salary).to.eql(parseInt(requestJson.salary))\r",
							"})\r",
							"\r",
							"// 8. Print family parameter from resonse to the console\r",
							"let family = pm.response.json().family\r",
							"console.log(family)\r",
							"\r",
							"\r",
							"// 9. Check that the dog parameter has a name parameter\r",
							"let dog  = family.pets.dog;\r",
							"let dog_name = \"Luky\";\r",
							"let dog_age = 4;\r",
							"pm.test(\"Check that the dog parameter has a name parameter\", function(){\r",
							"    pm.expect(dog.name).is.exist\r",
							"})\r",
							"\r",
							"// 10. Check that the dog parameter has a age parameter\r",
							"pm.test(\"Check that the dog parameter has a age parameter\", function(){\r",
							"    pm.expect(dog.age).is.exist\r",
							"})\r",
							"\r",
							"// 11. Check that the name parameter is set to Luky\r",
							"pm.test(\"Check that the name parameter is set to Luky.\", function(){\r",
							"    pm.expect(dog.name).to.eql(dog_name)\r",
							"})\r",
							"\r",
							"// 12. Check that the age parameter is set to 4\r",
							"pm.test(\"Check that the age parameter is set to 4\", function(){\r",
							"    pm.expect(dog.age).to.eql(dog_age)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitry",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "23",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Dmitry&age=23&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Parse response body into JSON\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"// 4. Parse request\r",
							"let requestJson = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Check that name in response is equal to name from request (name pick up from request)\r",
							"pm.test(\"Name in response is equal to name from request\", function(){\r",
							"    pm.expect(responseJson.name).is.eql(requestJson.name)\r",
							"})\r",
							"\r",
							"// 6. Check that age in response is equal to age from request (age pick up from request)\r",
							"pm.test(\"Age in response is equal to age from request\", function(){\r",
							"    pm.expect(responseJson.age).is.eql(parseInt(requestJson.age))\r",
							"})\r",
							"\r",
							"// 7. Print salary parameter from request to the console\r",
							"console.log(requestJson.salary)\r",
							"\r",
							"// 8. Print salary parameter from response to the console\r",
							"console.log(responseJson.salary)\r",
							"\r",
							"// 9. Print the 0th element of the salary parameter from response to the console\r",
							"console.log(responseJson.salary[0])\r",
							"\r",
							"// 10. Print the 1st element of the salary parameter from response to the console\r",
							"console.log(+responseJson.salary[1])\r",
							"\r",
							"// 11. Print the 2nd element of the salary parameter from response to the console\r",
							"console.log(+responseJson.salary[2])\r",
							"\r",
							"// 12. Check that the 1st element of the salary parameter is equal to salary*2 from request (pick salary from request.)\r",
							"pm.test(\"The 1st element of the salary parameter is equal to salary*2\", function(){\r",
							"    pm.expect(+responseJson.salary[1]).is.eql(requestJson.salary*2)\r",
							"})\r",
							"\r",
							"// 13. Check that the 2nd element of the salary parameter is equal to salary*4 from request (pick salary from request.)\r",
							"pm.test(\"The 1st element of the salary parameter is equal to salary*4\", function(){\r",
							"    pm.expect(+responseJson.salary[2]).is.eql(requestJson.salary*3)\r",
							"})\r",
							"\r",
							"// 17.\r",
							"pm.environment.set(\"name\", responseJson.name)\r",
							"\r",
							"// 18. \r",
							"pm.environment.set(\"age\", responseJson.age)\r",
							"\r",
							"// 19.\r",
							"pm.environment.set(\"salary\", responseJson.salary)\r",
							"\r",
							"// 20.\r",
							"\r",
							"let for_salary = responseJson.salary\r",
							"for( let i = 0; i<for_salary.length; i++){\r",
							"    console.log(+for_salary[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Dmitry&age=23&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Parse the response body into JSON\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"// 7. Parse request\r",
							"let requestJson = request.data;\r",
							"\r",
							"// 8. Check that the json response has start_qa_salary parameter\r",
							"pm.test(\"Json response has start_qa_salary parameter \", function(){\r",
							"    pm.expect(responseJson.start_qa_salary).is.exist\r",
							"});\r",
							"\r",
							"// 9. Check that the json response has qa_salary_after_6_months parameter\r",
							"pm.test(\"Json response has qa_salary_after_6_months parameter \", function(){\r",
							"    pm.expect(responseJson.qa_salary_after_6_months).is.exist\r",
							"});\r",
							"\r",
							"// 10. Check that the json response has qa_salary_after_12_months parameter\r",
							"pm.test(\"Json response has qa_salary_after_12_months parameter \", function(){\r",
							"    pm.expect(responseJson.qa_salary_after_12_months).is.exist\r",
							"});\r",
							"\r",
							"// 11.  Check that the json response has qa_salary_after_1.5_year parameter\r",
							"pm.test(\"Json response has qa_salary_after_1.5_year parameter \", function(){\r",
							"    pm.expect(responseJson[\"qa_salary_after_1.5_year\"]).is.exist\r",
							"});\r",
							"\r",
							"// 12. Check that the json response has qa_salary_after_3.5_years parameter\r",
							"pm.test(\"Json response has qa_salary_after_3.5_years parameter \", function(){\r",
							"    pm.expect(responseJson[\"qa_salary_after_3.5_years\"]).is.exist\r",
							"});\r",
							"\r",
							"// 13. Check that the json response has person parameter\r",
							"pm.test(\"Json response has person parameter \", function(){\r",
							"    pm.expect(responseJson.person).is.exist\r",
							"});\r",
							"\r",
							"// 14. Check that the start_qa_salary parameter is equal to salary from request (pick salary from request.)\r",
							"pm.test(\"The start_qa_salary parameter is equal to salary from request\", function(){\r",
							"    pm.expect(responseJson.start_qa_salary).is.eql(+requestJson.salary)\r",
							"})\r",
							"\r",
							"// 15. Check that the qa_salary_after_6_months parameter is equal to salary*2 from request (pick salary from request.)\r",
							"pm.test(\"The qa_salary_after_6_months parameter is equal to salary * 2\", function(){\r",
							"    pm.expect(responseJson.qa_salary_after_6_months).is.eql(+requestJson.salary*2)\r",
							"})\r",
							"\r",
							"// 16. Check that the qa_salary_after_12_months parameter is equal to salary*2.7 from request (pick salary from request.)\r",
							"pm.test(\"The qa_salary_after_12_months parameter is equal to salary * 2.7\", function(){\r",
							"    pm.expect(responseJson.qa_salary_after_12_months).is.eql(+requestJson.salary*2.7)\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// 17. Check that the qa_salary_after_1.5_year parameter is equal to salary*3.3 from request (pick salary from request.)\r",
							"pm.test(\"The qa_salary_after_1.5_year parameter is equal to salary * 3.3\", function(){\r",
							"    pm.expect(responseJson[\"qa_salary_after_1.5_year\"]).is.eql(+requestJson.salary*3.3) \r",
							"})\r",
							"\r",
							"// 18. Check that the qa_salary_after_3.5_years parameter is equal to salary*3.8 from request (pick salary from request.)\r",
							"pm.test(\"The qa_salary_after_3.5_years is equal to salary * 3.8\", function(){\r",
							"    pm.expect(responseJson[\"qa_salary_after_3.5_years\"]).is.eql(+requestJson.salary*3.8)\r",
							"})\r",
							"\r",
							"// 19. Check that in the person parameter, the 1st element from u_name is equal to salary from request (pick salary from request.)\r",
							"pm.test(\"The person parameter, the 1st element from u_name is equal to salary from request\", function(){\r",
							"    pm.expect(responseJson.person.u_name[1]).is.eql(+requestJson.salary)\r",
							"})\r",
							"\r",
							"// 20. Check that the u_age parameter is equal to age from request (take age from request.)\r",
							"pm.test(\"The u_age parameter is equal to age from request\", function(){\r",
							"    pm.expect(responseJson.person.u_age).is.eql(+requestJson.age)\r",
							"})\r",
							"\r",
							"// 21. Check that the qa_salary_after_5_years parameter is equal to salary*3.8 from request (pick salary from request.)\r",
							"pm.test(\"The qa_salary_after_5_years is equal to salary * 4.2\", function(){\r",
							"    pm.expect(responseJson.person.u_salary_5_years).is.eql(+requestJson.salary*4.2)\r",
							"})\r",
							"\r",
							"// 22. ***Write a loop that prints the list items from the person parameter to the console in order.\r",
							"let person_list = responseJson.person.u_name\r",
							"for (let i=0; i<person_list.length; i++){\r",
							"    console.log(i+\". \"+person_list[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}